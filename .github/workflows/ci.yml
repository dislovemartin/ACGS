name: ACGS-PGP Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM for comprehensive testing

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  preflight:
    runs-on: ubuntu-latest
    name: Pre-flight Checks
    outputs:
      should_run_tests: ${{ steps.determine_changes.outputs.should_run }}
      changed_services: ${{ steps.determine_changes.outputs.services }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v46
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src/**
            tests/**
            scripts/**
            .github/**
          files_ignore: |
            docs/**
            README.md

      - name: Determine services and test execution
        id: determine_changes
        run: |
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "services=all" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changed_files.outputs.any_changed }}" == "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            changed_files_list="${{ steps.changed_files.outputs.all_changed_files }}"
            services=""
            if echo "$changed_files_list" | grep "src/backend/ac_service" > /dev/null; then
              services="$services ac_service"
            fi
            if echo "$changed_files_list" | grep "src/backend/gs_service" > /dev/null; then
              services="$services gs_service"
            fi
            if echo "$changed_files_list" | grep "src/backend/workflow_service" > /dev/null; then
              services="$services workflow_service"
            fi
            if [ -z "$services" ]; then
              echo "services=all" >> $GITHUB_OUTPUT
            else
              echo "services=$(echo $services | xargs)" >> $GITHUB_OUTPUT
            fi
          fi

  security_scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  code_quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest-cov bandit safety

      - name: Reformat code with black
        run: black src/ tests/

      - name: Code formatting check
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/

      - name: Linting
        run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Type checking
        run: mypy src/ --ignore-missing-imports

      - name: Security analysis
        working-directory: ./src
        run: bandit -r . -f json -o ../bandit-report.json || true

      - name: Safety scan
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 14

  unit_tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: [preflight, code_quality]
    if: needs.preflight.outputs.should_run_tests == 'true'
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        service: ['ac_service', 'gs_service', 'workflow_service', 'auth_service']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "src/backend/${{ matrix.service }}/requirements.txt" ]; then
            pip install -r src/backend/${{ matrix.service }}/requirements.txt
          fi
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: |
          cd src/backend/${{ matrix.service }}
          python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          files: src/backend/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-${{ matrix.python-version }}

  build_images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [preflight, unit_tests]
    if: needs.preflight.outputs.should_run_tests == 'true'
    strategy:
      matrix:
        service: ['ac_service', 'gs_service', 'workflow_service', 'auth_service']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: src/backend/${{ matrix.service }}
          file: src/backend/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ... (Keep your other jobs as in your original file, or let me know if you want further improvements for those.)

  notify_results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs:
      - security_scan
      - code_quality
      - unit_tests
      - build_images
      # Add any other jobs you want notifications for
      - preflight
    if: always()
    steps:
      - name: Notify on success
        if: success() && needs.unit_tests.result == 'success'
        run: |
          echo "✅ All unit tests passed successfully!"
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/email notification here

      - name: Notify on failure
        if: failure() || (cancelled() && needs.preflight.outputs.should_run_tests == 'true')
        run: |
          echo "❌ Some tests or steps failed or were cancelled. Check the logs for details."
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add failure notification here

      - name: Generate test report
        run: |
          echo "# ACGS-PGP CI/CD Test Report" > test-report.md
          echo "Generated: $(date)" >> test-report.md
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Overall Status Summary" >> test-report.md
          echo "- Security Scan: ${{ needs.security_scan.result }}" >> test-report.md
          echo "- Code Quality: ${{ needs.code_quality.result }}" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit_tests.result }}" >> test-report.md
          echo "- Build Docker Images: ${{ needs.build_images.result }}" >> test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          retention-days: 14
